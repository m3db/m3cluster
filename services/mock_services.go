// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/m3db/m3cluster/services (interfaces: Services)

package services

import (
	gomock "github.com/golang/mock/gomock"
	services "github.com/m3db/m3cluster/services"
	watch "github.com/m3db/m3cluster/vendor/github.com/m3db/m3x/watch"
)

// Mock of Services interface
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *_MockServicesRecorder
}

// Recorder for MockServices (not exported)
type _MockServicesRecorder struct {
	mock *MockServices
}

func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &_MockServicesRecorder{mock}
	return mock
}

func (_m *MockServices) EXPECT() *_MockServicesRecorder {
	return _m.recorder
}

func (_m *MockServices) Advertise(_param0 services.Advertisement) error {
	ret := _m.ctrl.Call(_m, "Advertise", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServicesRecorder) Advertise(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Advertise", arg0)
}

func (_m *MockServices) QueryInstances(_param0 string, _param1 services.QueryOptions) ([]services.ServiceInstance, error) {
	ret := _m.ctrl.Call(_m, "QueryInstances", _param0, _param1)
	ret0, _ := ret[0].([]services.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServicesRecorder) QueryInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryInstances", arg0, arg1)
}

func (_m *MockServices) Unadvertise(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "Unadvertise", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServicesRecorder) Unadvertise(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unadvertise", arg0, arg1)
}

func (_m *MockServices) WatchInstances(_param0 string, _param1 services.QueryOptions) (watch.Watch, error) {
	ret := _m.ctrl.Call(_m, "WatchInstances", _param0, _param1)
	ret0, _ := ret[0].(watch.Watch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServicesRecorder) WatchInstances(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WatchInstances", arg0, arg1)
}
