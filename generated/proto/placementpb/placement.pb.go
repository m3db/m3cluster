// Code generated by protoc-gen-go. DO NOT EDIT.
// source: placement.proto

/*
Package placementpb is a generated protocol buffer package.

It is generated from these files:
	placement.proto

It has these top-level messages:
	Placement
	Instance
	Shard
	PlacementSnapshots
*/
package placementpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShardState int32

const (
	ShardState_INITIALIZING ShardState = 0
	ShardState_AVAILABLE    ShardState = 1
	ShardState_LEAVING      ShardState = 2
	ShardState_RETIRED      ShardState = 3
)

var ShardState_name = map[int32]string{
	0: "INITIALIZING",
	1: "AVAILABLE",
	2: "LEAVING",
	3: "RETIRED",
}
var ShardState_value = map[string]int32{
	"INITIALIZING": 0,
	"AVAILABLE":    1,
	"LEAVING":      2,
	"RETIRED":      3,
}

func (x ShardState) String() string {
	return proto.EnumName(ShardState_name, int32(x))
}
func (ShardState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Placement struct {
	Instances     map[string]*Instance `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaFactor uint32               `protobuf:"varint,2,opt,name=replica_factor,json=replicaFactor" json:"replica_factor,omitempty"`
	NumShards     uint32               `protobuf:"varint,3,opt,name=num_shards,json=numShards" json:"num_shards,omitempty"`
	IsSharded     bool                 `protobuf:"varint,4,opt,name=is_sharded,json=isSharded" json:"is_sharded,omitempty"`
	// cutover_time is the placement-level cutover time and determines when the clients
	// watching the placement deems the placement as "in effect" and can use it to determine
	// shard placement.
	CutoverTime int64 `protobuf:"varint,5,opt,name=cutover_time,json=cutoverTime" json:"cutover_time,omitempty"`
	IsMirrored  bool  `protobuf:"varint,6,opt,name=is_mirrored,json=isMirrored" json:"is_mirrored,omitempty"`
}

func (m *Placement) Reset()                    { *m = Placement{} }
func (m *Placement) String() string            { return proto.CompactTextString(m) }
func (*Placement) ProtoMessage()               {}
func (*Placement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Placement) GetInstances() map[string]*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *Placement) GetReplicaFactor() uint32 {
	if m != nil {
		return m.ReplicaFactor
	}
	return 0
}

func (m *Placement) GetNumShards() uint32 {
	if m != nil {
		return m.NumShards
	}
	return 0
}

func (m *Placement) GetIsSharded() bool {
	if m != nil {
		return m.IsSharded
	}
	return false
}

func (m *Placement) GetCutoverTime() int64 {
	if m != nil {
		return m.CutoverTime
	}
	return 0
}

func (m *Placement) GetIsMirrored() bool {
	if m != nil {
		return m.IsMirrored
	}
	return false
}

type Instance struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rack       string   `protobuf:"bytes,2,opt,name=rack" json:"rack,omitempty"`
	Zone       string   `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	Weight     uint32   `protobuf:"varint,4,opt,name=weight" json:"weight,omitempty"`
	Endpoint   string   `protobuf:"bytes,5,opt,name=endpoint" json:"endpoint,omitempty"`
	Shards     []*Shard `protobuf:"bytes,6,rep,name=shards" json:"shards,omitempty"`
	ShardSetId uint32   `protobuf:"varint,7,opt,name=shard_set_id,json=shardSetId" json:"shard_set_id,omitempty"`
	Hostname   string   `protobuf:"bytes,8,opt,name=hostname" json:"hostname,omitempty"`
	Port       uint32   `protobuf:"varint,9,opt,name=port" json:"port,omitempty"`
}

func (m *Instance) Reset()                    { *m = Instance{} }
func (m *Instance) String() string            { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()               {}
func (*Instance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Instance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Instance) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Instance) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Instance) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Instance) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Instance) GetShards() []*Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *Instance) GetShardSetId() uint32 {
	if m != nil {
		return m.ShardSetId
	}
	return 0
}

func (m *Instance) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Instance) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Shard struct {
	Id       uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	State    ShardState `protobuf:"varint,2,opt,name=state,enum=placementpb.ShardState" json:"state,omitempty"`
	SourceId string     `protobuf:"bytes,3,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	// Shard-level cutover and cutoff times determine when the shards have been cut over or
	// cut off from the source instance to the destination instance. The placement-level
	// cutover times are usually (but not required to be) earlier than shard-level cutover
	// times if the clients watching the placement need to send traffic to the shards before
	// they are ready to cut over or after they are ready to cut off (e.g., for warmup purposes).
	CutoverNanos int64 `protobuf:"varint,4,opt,name=cutover_nanos,json=cutoverNanos" json:"cutover_nanos,omitempty"`
	CutoffNanos  int64 `protobuf:"varint,5,opt,name=cutoff_nanos,json=cutoffNanos" json:"cutoff_nanos,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Shard) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Shard) GetState() ShardState {
	if m != nil {
		return m.State
	}
	return ShardState_INITIALIZING
}

func (m *Shard) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *Shard) GetCutoverNanos() int64 {
	if m != nil {
		return m.CutoverNanos
	}
	return 0
}

func (m *Shard) GetCutoffNanos() int64 {
	if m != nil {
		return m.CutoffNanos
	}
	return 0
}

type PlacementSnapshots struct {
	Snapshots []*Placement `protobuf:"bytes,1,rep,name=snapshots" json:"snapshots,omitempty"`
}

func (m *PlacementSnapshots) Reset()                    { *m = PlacementSnapshots{} }
func (m *PlacementSnapshots) String() string            { return proto.CompactTextString(m) }
func (*PlacementSnapshots) ProtoMessage()               {}
func (*PlacementSnapshots) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlacementSnapshots) GetSnapshots() []*Placement {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func init() {
	proto.RegisterType((*Placement)(nil), "placementpb.Placement")
	proto.RegisterType((*Instance)(nil), "placementpb.Instance")
	proto.RegisterType((*Shard)(nil), "placementpb.Shard")
	proto.RegisterType((*PlacementSnapshots)(nil), "placementpb.PlacementSnapshots")
	proto.RegisterEnum("placementpb.ShardState", ShardState_name, ShardState_value)
}

func init() { proto.RegisterFile("placement.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x76, 0x93, 0x66, 0xc7, 0x75, 0x88, 0x56, 0xa2, 0x58, 0x45, 0x08, 0x13, 0x54, 0x29,
	0x2a, 0x22, 0x87, 0xc2, 0x01, 0x71, 0x0b, 0x10, 0x2a, 0xa3, 0x50, 0xa1, 0x75, 0xd5, 0x03, 0x17,
	0xcb, 0xb5, 0x37, 0x64, 0xd5, 0x7a, 0xd7, 0xda, 0xdd, 0x14, 0x95, 0x5f, 0xe2, 0x5f, 0xf8, 0x1a,
	0x3e, 0x00, 0x79, 0x6c, 0xa7, 0x89, 0xe0, 0x36, 0xf3, 0xe6, 0xed, 0xcc, 0xbc, 0xe7, 0x31, 0x3c,
	0xac, 0x6e, 0xb2, 0x9c, 0x97, 0x5c, 0xda, 0x69, 0xa5, 0x95, 0x55, 0xd4, 0xdf, 0x00, 0xd5, 0xd5,
	0xf8, 0xb7, 0x0b, 0xe4, 0x6b, 0x97, 0xd3, 0x0f, 0x40, 0x84, 0x34, 0x36, 0x93, 0x39, 0x37, 0xa1,
	0x13, 0x79, 0x13, 0xff, 0xf4, 0x78, 0xba, 0x45, 0x9f, 0x6e, 0xa8, 0xd3, 0xb8, 0xe3, 0xcd, 0xa5,
	0xd5, 0x77, 0xec, 0xfe, 0x1d, 0x3d, 0x86, 0xa1, 0xe6, 0xd5, 0x8d, 0xc8, 0xb3, 0x74, 0x99, 0xe5,
	0x56, 0xe9, 0xd0, 0x8d, 0x9c, 0x49, 0xc0, 0x82, 0x16, 0xfd, 0x84, 0x20, 0x7d, 0x0a, 0x20, 0xd7,
	0x65, 0x6a, 0x56, 0x99, 0x2e, 0x4c, 0xe8, 0x21, 0x85, 0xc8, 0x75, 0x99, 0x20, 0x50, 0x97, 0x85,
	0x69, 0xaa, 0xbc, 0x08, 0xf7, 0x22, 0x67, 0x32, 0x60, 0x44, 0x98, 0xa4, 0x01, 0xe8, 0x73, 0x38,
	0xc8, 0xd7, 0x56, 0xdd, 0x72, 0x9d, 0x5a, 0x51, 0xf2, 0xb0, 0x17, 0x39, 0x13, 0x8f, 0xf9, 0x2d,
	0x76, 0x21, 0x4a, 0x4e, 0x9f, 0x81, 0x2f, 0x4c, 0x5a, 0x0a, 0xad, 0x95, 0xe6, 0x45, 0xd8, 0xc7,
	0x16, 0x20, 0xcc, 0x97, 0x16, 0x39, 0x4a, 0x60, 0xb8, 0xab, 0x82, 0x8e, 0xc0, 0xbb, 0xe6, 0x77,
	0xa1, 0x13, 0x39, 0x13, 0xc2, 0xea, 0x90, 0xbe, 0x84, 0xde, 0x6d, 0x76, 0xb3, 0xe6, 0xa8, 0xc1,
	0x3f, 0x7d, 0xb4, 0xe3, 0x46, 0xf7, 0x9a, 0x35, 0x9c, 0x77, 0xee, 0x5b, 0x67, 0xfc, 0xc7, 0x81,
	0x41, 0x87, 0xd3, 0x21, 0xb8, 0xa2, 0x68, 0xdb, 0xb9, 0xa2, 0xa0, 0x14, 0xf6, 0x74, 0x96, 0x5f,
	0x63, 0x33, 0xc2, 0x30, 0xae, 0xb1, 0x9f, 0x4a, 0x72, 0x74, 0x80, 0x30, 0x8c, 0xe9, 0x21, 0xf4,
	0x7f, 0x70, 0xf1, 0x7d, 0x65, 0x51, 0x78, 0xc0, 0xda, 0x8c, 0x1e, 0xc1, 0x80, 0xcb, 0xa2, 0x52,
	0x42, 0x5a, 0x54, 0x4c, 0xd8, 0x26, 0xa7, 0x27, 0xd0, 0x6f, 0xbd, 0xec, 0xe3, 0x87, 0xa3, 0x3b,
	0xab, 0xa2, 0x6f, 0xac, 0x65, 0xd0, 0x08, 0x0e, 0x30, 0x4a, 0x0d, 0xb7, 0xa9, 0x28, 0xc2, 0x7d,
	0x9c, 0x02, 0x88, 0x25, 0xdc, 0xc6, 0x45, 0x3d, 0x69, 0xa5, 0x8c, 0x95, 0x59, 0xc9, 0xc3, 0x41,
	0x33, 0xa9, 0xcb, 0xeb, 0x8d, 0x2b, 0xa5, 0x6d, 0x48, 0xf0, 0x15, 0xc6, 0xe3, 0x5f, 0x0e, 0xf4,
	0x70, 0xc6, 0x96, 0xe6, 0x00, 0x35, 0xbf, 0x82, 0x9e, 0xb1, 0x99, 0x6d, 0x1c, 0x1c, 0x9e, 0x3e,
	0xfe, 0x77, 0xad, 0xa4, 0x2e, 0xb3, 0x86, 0x45, 0x9f, 0x00, 0x31, 0x6a, 0xad, 0x73, 0x5e, 0xef,
	0xd5, 0x78, 0x32, 0x68, 0x80, 0xb8, 0xa0, 0x2f, 0x20, 0xe8, 0xbe, 0xba, 0xcc, 0xa4, 0x32, 0x68,
	0x8f, 0xc7, 0xba, 0x53, 0x38, 0xaf, 0xb1, 0xee, 0x34, 0x96, 0xcb, 0x96, 0xb3, 0x75, 0x1a, 0xcb,
	0x25, 0x52, 0xc6, 0x9f, 0x81, 0x6e, 0x2e, 0x39, 0x91, 0x59, 0x65, 0x56, 0xca, 0x1a, 0xfa, 0x06,
	0x88, 0xe9, 0x92, 0xf6, 0xfa, 0x0f, 0xff, 0x7f, 0xfd, 0xec, 0x9e, 0x78, 0x72, 0x06, 0x70, 0xaf,
	0x82, 0x8e, 0xe0, 0x20, 0x3e, 0x8f, 0x2f, 0xe2, 0xd9, 0x22, 0xfe, 0x16, 0x9f, 0x9f, 0x8d, 0x1e,
	0xd0, 0x00, 0xc8, 0xec, 0x72, 0x16, 0x2f, 0x66, 0xef, 0x17, 0xf3, 0x91, 0x43, 0x7d, 0xd8, 0x5f,
	0xcc, 0x67, 0x97, 0x75, 0xcd, 0xad, 0x13, 0x36, 0xbf, 0x88, 0xd9, 0xfc, 0xe3, 0xc8, 0xbb, 0xea,
	0xe3, 0xef, 0xf9, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x9a, 0xab, 0xd6, 0xb1, 0x03,
	0x00, 0x00,
}
